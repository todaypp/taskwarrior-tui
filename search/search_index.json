{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"taskwarrior-tui A Terminal User Interface (TUI) for Taskwarrior that you didn't know you wanted. Features vim-like navigation live filter updates add, delete, complete, log tasks multiple selection tab completion colors based on taskwarrior Showcase Demo : (video) User Interface : (gif) Multiple selection : (gif) Tab completion : (gif) Documentation See https://kdheepak.com/taskwarrior-tui for documentation. See https://kdheepak.com/taskwarrior-tui/installation/ for installation instructions for your platform. See https://kdheepak.com/taskwarrior-tui/quick_start/ to get started. See https://kdheepak.com/taskwarrior-tui/configuration/keys or https://kdheepak.com/taskwarrior-tui/configuration/colors/ for customization options. Installation Unless otherwise specified, you will need to install the latest version of taskwarrior first. See https://taskwarrior.org/download/ for more information. Pre-compiled releases are available on the GitHub repo : Download the tar.gz file for your OS from the latest release . Unzip the tar.gz file Run with ./taskwarrior-tui . See https://kdheepak.com/taskwarrior-tui/installation/ on instructions for using package managers on various platforms. If you are compiling from source, you'll need to most recent stable rust compiler. Configuration taskwarrior-tui uses taskwarrior 's .taskrc for configuration. See the documentation for more information: https://kdheepak.com/taskwarrior-tui/configuration/keys https://kdheepak.com/taskwarrior-tui/configuration/colors https://kdheepak.com/taskwarrior-tui/configuration/advanced/ Here is an example `.taskrc` ### taskwarrior configuration options # taskwarrior's configuration data.location=.task verbose=affected,blank,context,edit,header,footnote,label,new-id,project,special,sync,recur uda.priority.values=H,M,,L color.alternate= # taskwarrior-tui reads color attributes from the following to display the same colors of tasks as the CLI color.tagged=black on rgb444 # Remove age, tags from task next report. # taskwarrior-tui reads the labels and columns from these options to display tasks the same way taskwarrior does report.next.labels=ID,Active,Age,Deps,P,Project,Tag,Recur,S,Due,Until,Description,Urg report.next.columns=id,start.age,entry.age,depends,priority,project,tags,recur,scheduled.countdown,due.relative,until.remaining,description.truncated_count,urgency report.next.filter=(status:pending or status:waiting) page:limit ### taskwarrior-tui configuration options uda.taskwarrior-tui.keyconfig.done=x uda.taskwarrior-tui.keyconfig.delete=d uda.taskwarrior-tui.shortcuts.0=~/local/bin/task-sync.sh uda.taskwarrior-tui.report.next.filter=(status:pending or status:waiting) References / Resources If you like taskwarrior-tui , consider donating to @GothenburgBitFactory at https://github.com/sponsors/GothenburgBitFactory or a charity of your choice. Additional resources https://github.com/GothenburgBitFactory/taskwarrior https://github.com/GothenburgBitFactory/libshared https://github.com/GothenburgBitFactory/timewarrior https://github.com/fdehau/tui-rs https://github.com/crossterm-rs/crossterm/ https://github.com/async-rs/async-std https://github.com/kkawakam/rustyline https://github.com/vit-project/vit https://github.com/taskchampion/taskchampion/","title":"Home"},{"location":"#taskwarrior-tui","text":"A Terminal User Interface (TUI) for Taskwarrior that you didn't know you wanted.","title":"taskwarrior-tui"},{"location":"#features","text":"vim-like navigation live filter updates add, delete, complete, log tasks multiple selection tab completion colors based on taskwarrior","title":"Features"},{"location":"#showcase","text":"Demo : (video) User Interface : (gif) Multiple selection : (gif) Tab completion : (gif)","title":"Showcase"},{"location":"#documentation","text":"See https://kdheepak.com/taskwarrior-tui for documentation. See https://kdheepak.com/taskwarrior-tui/installation/ for installation instructions for your platform. See https://kdheepak.com/taskwarrior-tui/quick_start/ to get started. See https://kdheepak.com/taskwarrior-tui/configuration/keys or https://kdheepak.com/taskwarrior-tui/configuration/colors/ for customization options.","title":"Documentation"},{"location":"#installation","text":"Unless otherwise specified, you will need to install the latest version of taskwarrior first. See https://taskwarrior.org/download/ for more information. Pre-compiled releases are available on the GitHub repo : Download the tar.gz file for your OS from the latest release . Unzip the tar.gz file Run with ./taskwarrior-tui . See https://kdheepak.com/taskwarrior-tui/installation/ on instructions for using package managers on various platforms. If you are compiling from source, you'll need to most recent stable rust compiler.","title":"Installation"},{"location":"#configuration","text":"taskwarrior-tui uses taskwarrior 's .taskrc for configuration. See the documentation for more information: https://kdheepak.com/taskwarrior-tui/configuration/keys https://kdheepak.com/taskwarrior-tui/configuration/colors https://kdheepak.com/taskwarrior-tui/configuration/advanced/ Here is an example `.taskrc` ### taskwarrior configuration options # taskwarrior's configuration data.location=.task verbose=affected,blank,context,edit,header,footnote,label,new-id,project,special,sync,recur uda.priority.values=H,M,,L color.alternate= # taskwarrior-tui reads color attributes from the following to display the same colors of tasks as the CLI color.tagged=black on rgb444 # Remove age, tags from task next report. # taskwarrior-tui reads the labels and columns from these options to display tasks the same way taskwarrior does report.next.labels=ID,Active,Age,Deps,P,Project,Tag,Recur,S,Due,Until,Description,Urg report.next.columns=id,start.age,entry.age,depends,priority,project,tags,recur,scheduled.countdown,due.relative,until.remaining,description.truncated_count,urgency report.next.filter=(status:pending or status:waiting) page:limit ### taskwarrior-tui configuration options uda.taskwarrior-tui.keyconfig.done=x uda.taskwarrior-tui.keyconfig.delete=d uda.taskwarrior-tui.shortcuts.0=~/local/bin/task-sync.sh uda.taskwarrior-tui.report.next.filter=(status:pending or status:waiting)","title":"Configuration"},{"location":"#references-resources","text":"If you like taskwarrior-tui , consider donating to @GothenburgBitFactory at https://github.com/sponsors/GothenburgBitFactory or a charity of your choice. Additional resources https://github.com/GothenburgBitFactory/taskwarrior https://github.com/GothenburgBitFactory/libshared https://github.com/GothenburgBitFactory/timewarrior https://github.com/fdehau/tui-rs https://github.com/crossterm-rs/crossterm/ https://github.com/async-rs/async-std https://github.com/kkawakam/rustyline https://github.com/vit-project/vit https://github.com/taskchampion/taskchampion/","title":"References / Resources"},{"location":"faqs/","text":"Frequently Asked Questions (FAQs) Does taskwarrior-tui show error messages when running shell commands or shortcuts taskwarrior-tui shows an error prompt for shell if: the subprocess fails the subprocess succeeds but prints to stdout the subprocess is empty taskwarrior-tui shows an error prompt for shortcuts if: the shortcut fails If taskwarrior-tui encounters a prompt by the subprocess or the shortcut, taskwarrior-tui will not prompt the user for input again. This means, if you want to run a taskwarrior command as a shell command, you may want to pass rc.confirmation=off in the command. See the following screencast as an example: task rc.confirmation = off context define test project:work If you don't add rc.confirmation=off in the shell command, taskwarrior-tui will command the command but it'll fail because it won't receive any prompt.","title":"FAQs"},{"location":"faqs/#frequently-asked-questions-faqs","text":"","title":"Frequently Asked Questions (FAQs)"},{"location":"faqs/#does-taskwarrior-tui-show-error-messages-when-running-shell-commands-or-shortcuts","text":"taskwarrior-tui shows an error prompt for shell if: the subprocess fails the subprocess succeeds but prints to stdout the subprocess is empty taskwarrior-tui shows an error prompt for shortcuts if: the shortcut fails If taskwarrior-tui encounters a prompt by the subprocess or the shortcut, taskwarrior-tui will not prompt the user for input again. This means, if you want to run a taskwarrior command as a shell command, you may want to pass rc.confirmation=off in the command. See the following screencast as an example: task rc.confirmation = off context define test project:work If you don't add rc.confirmation=off in the shell command, taskwarrior-tui will command the command but it'll fail because it won't receive any prompt.","title":"Does taskwarrior-tui show error messages when running shell commands or shortcuts"},{"location":"installation/","text":"Installation Unless otherwise specified, you will need to install taskwarrior first. See https://taskwarrior.org/download/ for more information. Manual ( Recommended ) Download the tar.gz file for your OS from the latest release . Unzip the tar.gz file Run with ./taskwarrior-tui . Install from source git clone https://github.com/kdheepak/taskwarrior-tui.git cd taskwarrior-tui cargo build --release Using brew This installs task from homebrew as well. brew install taskwarrior-tui Installation for Arch Linux Use pacman to install it from the community repository : pacman -S taskwarrior-tui Or use your favorite AUR helper to download the git package maintained by @loki7990 . For example: yay -S taskwarrior-tui-git # build from source Using snap snap install taskwarrior-tui Using zdharma-continuum/zinit Add the following to your ~/.zshrc : zinit ice wait:2 lucid extract \"\" from \"gh-r\" as \"command\" mv \"taskwarrior-tui* -> tt\" zinit load kdheepak/taskwarrior-tui","title":"Installation"},{"location":"installation/#installation","text":"Unless otherwise specified, you will need to install taskwarrior first. See https://taskwarrior.org/download/ for more information. Manual ( Recommended ) Download the tar.gz file for your OS from the latest release . Unzip the tar.gz file Run with ./taskwarrior-tui . Install from source git clone https://github.com/kdheepak/taskwarrior-tui.git cd taskwarrior-tui cargo build --release Using brew This installs task from homebrew as well. brew install taskwarrior-tui Installation for Arch Linux Use pacman to install it from the community repository : pacman -S taskwarrior-tui Or use your favorite AUR helper to download the git package maintained by @loki7990 . For example: yay -S taskwarrior-tui-git # build from source Using snap snap install taskwarrior-tui Using zdharma-continuum/zinit Add the following to your ~/.zshrc : zinit ice wait:2 lucid extract \"\" from \"gh-r\" as \"command\" mv \"taskwarrior-tui* -> tt\" zinit load kdheepak/taskwarrior-tui","title":"Installation"},{"location":"keybindings/","text":"Default Keybindings Keybindings: Esc: - Exit current action ]: Next view - Go to next view [: Previous view - Go to previous view Keybindings for task report: /: task {string} - Filter task report a: task add {string} - Add new task d: task {selected} done - Mark task as done e: task {selected} edit - Open selected task in editor j: {selected+=1} - Move down in task report k: {selected-=1} - Move up in task report J: {selected+=pageheight} - Move page down in task report K: {selected-=pageheight} - Move page up in task report g: {selected=first} - Go to top G: {selected=last} - Go to bottom l: task log {string} - Log new task m: task {selected} modify {string} - Modify selected task q: exit - Quit s: task {selected} start/stop - Toggle start and stop t: task {selected} +{tag}/-{tag} - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: `next`) u: task undo - Undo v: {toggle mark on selected} - Toggle mark on selected V: {toggle marks on all tasks} - Toggle marks on all tasks in current filter report x: task {selected} delete - Delete z: toggle task info - Toggle task info view A: task {selected} annotate {string} - Annotate current task Ctrl-e: scroll down task details - Scroll task details view down one line Ctrl-y: scroll up task details - Scroll task details view up one line !: {string} - Custom shell command 1-9: {string} - Run user defined shortcuts :: {task id} - Jump to task id c: context switcher menu - Open context switcher menu ?: help - Help menu Keybindings for filter / command prompt: Ctrl + f | Right: move forward - Move forward one character Ctrl + b | Left: move backward - Move backward one character Ctrl + h | Backspace: backspace - Delete one character back Ctrl + d | Delete: delete - Delete one character forward Ctrl + a | Home: home - Go to the beginning of line Ctrl + e | End: end - Go to the end of line Ctrl + k: delete to end - Delete to the end of line Ctrl + u: delete to beginning - Delete to the beginning of line Ctrl + w: delete previous word - Delete previous word Alt + d: delete next word - Delete next word Alt + b: move to previous word - Move to previous word Alt + f: move to next word - Move to next word Alt + t: transpose words - Transpose words Up: scroll history - Go backward in history matching from beginning of line to cursor Down: scroll history - Go forward in history matching from beginning of line to cursor TAB | Ctrl + n: tab complete - Open tab completion and selection first element OR cycle to next element BACKTAB | Ctrl + p: tab complete - Cycle to previous element Keybindings for context switcher: j: {selected+=1} - Move forward a context k: {selected-=1} - Move back a context Enter: task context {selected} - Select highlighted context Keybindings for calendar: j: {selected+=1} - Move forward a year in calendar k: {selected-=1} - Move back a year in calendar J: {selected+=10} - Move forward a decade in calendar K: {selected-=10} - Move back a decade in calendar","title":"Keybindings"},{"location":"keybindings/#default-keybindings","text":"Keybindings: Esc: - Exit current action ]: Next view - Go to next view [: Previous view - Go to previous view Keybindings for task report: /: task {string} - Filter task report a: task add {string} - Add new task d: task {selected} done - Mark task as done e: task {selected} edit - Open selected task in editor j: {selected+=1} - Move down in task report k: {selected-=1} - Move up in task report J: {selected+=pageheight} - Move page down in task report K: {selected-=pageheight} - Move page up in task report g: {selected=first} - Go to top G: {selected=last} - Go to bottom l: task log {string} - Log new task m: task {selected} modify {string} - Modify selected task q: exit - Quit s: task {selected} start/stop - Toggle start and stop t: task {selected} +{tag}/-{tag} - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: `next`) u: task undo - Undo v: {toggle mark on selected} - Toggle mark on selected V: {toggle marks on all tasks} - Toggle marks on all tasks in current filter report x: task {selected} delete - Delete z: toggle task info - Toggle task info view A: task {selected} annotate {string} - Annotate current task Ctrl-e: scroll down task details - Scroll task details view down one line Ctrl-y: scroll up task details - Scroll task details view up one line !: {string} - Custom shell command 1-9: {string} - Run user defined shortcuts :: {task id} - Jump to task id c: context switcher menu - Open context switcher menu ?: help - Help menu Keybindings for filter / command prompt: Ctrl + f | Right: move forward - Move forward one character Ctrl + b | Left: move backward - Move backward one character Ctrl + h | Backspace: backspace - Delete one character back Ctrl + d | Delete: delete - Delete one character forward Ctrl + a | Home: home - Go to the beginning of line Ctrl + e | End: end - Go to the end of line Ctrl + k: delete to end - Delete to the end of line Ctrl + u: delete to beginning - Delete to the beginning of line Ctrl + w: delete previous word - Delete previous word Alt + d: delete next word - Delete next word Alt + b: move to previous word - Move to previous word Alt + f: move to next word - Move to next word Alt + t: transpose words - Transpose words Up: scroll history - Go backward in history matching from beginning of line to cursor Down: scroll history - Go forward in history matching from beginning of line to cursor TAB | Ctrl + n: tab complete - Open tab completion and selection first element OR cycle to next element BACKTAB | Ctrl + p: tab complete - Cycle to previous element Keybindings for context switcher: j: {selected+=1} - Move forward a context k: {selected-=1} - Move back a context Enter: task context {selected} - Select highlighted context Keybindings for calendar: j: {selected+=1} - Move forward a year in calendar k: {selected-=1} - Move back a year in calendar J: {selected+=10} - Move forward a decade in calendar K: {selected-=10} - Move back a decade in calendar","title":"Default Keybindings"},{"location":"quick_start/","text":"Quick Start Install taskwarrior and taskwarrior-tui . Run the following in a shell. $ taskwarrior-tui Use vim like keys to navigate your task list. Press ? for more information. Tip : Alias tt to taskwarrior-tui . Add the following to your dotfiles (e.g. ~/.bashrc , ~/.zshrc ): alias tt=\"taskwarrior-tui\"","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Install taskwarrior and taskwarrior-tui . Run the following in a shell. $ taskwarrior-tui Use vim like keys to navigate your task list. Press ? for more information. Tip : Alias tt to taskwarrior-tui . Add the following to your dotfiles (e.g. ~/.bashrc , ~/.zshrc ): alias tt=\"taskwarrior-tui\"","title":"Quick Start"},{"location":"taskwarrior-tui.1/","text":"% taskwarrior-tui(1) NAME taskwarrior-tui \u2014 A terminal user interface for taskwarrior (https://github.com/kdheepak/taskwarrior-tui) SYNOPSIS taskwarrior-tui taskwarrior-tui is a terminal user interface for taskwarrior . EXAMPLES taskwarrior-tui : Starts a terminal user interface for taskwarrior . alias tt=taskwarrior-tui : Add the above to your dotfiles to use tt to start taskwarrior-tui . KEYBINDINGS Keybindings: Esc : Exit current action ] : Next view - Go to next view [ : Previous view - Go to previous view Keybindings for task report: / : task {string} - Filter task report a : task add {string} - Add new task d : task {selected} done - Mark task as done e : task {selected} edit - Open selected task in editor j : {selected+=1} - Move down in task report k : {selected-=1} - Move up in task report J : {selected+=pageheight} - Move page down in task report K : {selected-=pageheight} - Move page up in task report g : {selected=first} - Go to top G : {selected=last} - Go to bottom l : task log {string} - Log new task m : task {selected} modify {string} - Modify selected task q : exit - Quit s : task {selected} start/stop - Toggle start and stop t : task {selected} +{tag}/-{tag} - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: next ) u : task undo - Undo v : {toggle mark on selected} - Toggle mark on selected V : {toggle marks on all tasks} - Toggle marks on all tasks in current filter report x : task delete {selected} - Delete z : toggle task info - Toggle task info view A : task {selected} annotate {string} - Annotate current task Ctrl-e : scroll down task details - Scroll task details view down one line Ctrl-y : scroll up task details - Scroll task details view up one line ! : {string} - Custom shell command 1-9 : {string} - Run user defined shortcuts : : {task id} - Jump to task id c : context switcher menu - Open context switcher menu ? : help - Help menu Keybindings for filter / command prompt: Ctrl + f | Right : move forward - Move forward one character Ctrl + b | Left : move backward - Move backward one character Ctrl + h | Backspace : backspace - Delete one character back Ctrl + d | Delete : delete - Delete one character forward Ctrl + a | Home : home - Go to the beginning of line Ctrl + e | End : end - Go to the end of line Ctrl + k : delete to end - Delete to the end of line Ctrl + u : delete to beginning - Delete to the beginning of line Ctrl + w : delete previous word - Delete previous word Alt + d : delete next word - Delete next word Alt + b : move to previous word - Move to previous word Alt + f : move to next word - Move to next word Alt + t : transpose words - Transpose words Up : scroll history - Go backward in history matching from beginning of line to cursor Down : scroll history - Go forward in history matching from beginning of line to cursor TAB | Ctrl + n : tab complete - Open tab completion and selection first element OR cycle to next element BACKTAB | Ctrl + p : tab complete - Cycle to previous element Keybindings for context switcher: j : {selected+=1} - Move forward a context k : {selected-=1} - Move back a context Keybindings for calendar: j : {selected+=1} - Move forward a year in calendar k : {selected-=1} - Move back a year in calendar J : {selected+=10} - Move forward a decade in calendar K : {selected-=10} - Move back a decade in calendar EXIT STATUSES 0 : If everything goes OK. AUTHOR taskwarrior-tui is maintained by Dheepak \u2018kdheepak\u2019 Krishnamurthy and other contributors. Source code: https://github.com/kdheepak/taskwarrior-tui/ \\ Contributors: https://github.com/kdheepak/taskwarrior-tui/graphs/contributors","title":"Taskwarrior tui.1"},{"location":"taskwarrior-tui.1/#name","text":"taskwarrior-tui \u2014 A terminal user interface for taskwarrior (https://github.com/kdheepak/taskwarrior-tui)","title":"NAME"},{"location":"taskwarrior-tui.1/#synopsis","text":"taskwarrior-tui taskwarrior-tui is a terminal user interface for taskwarrior .","title":"SYNOPSIS"},{"location":"taskwarrior-tui.1/#examples","text":"taskwarrior-tui : Starts a terminal user interface for taskwarrior . alias tt=taskwarrior-tui : Add the above to your dotfiles to use tt to start taskwarrior-tui .","title":"EXAMPLES"},{"location":"taskwarrior-tui.1/#keybindings","text":"Keybindings: Esc : Exit current action ] : Next view - Go to next view [ : Previous view - Go to previous view Keybindings for task report: / : task {string} - Filter task report a : task add {string} - Add new task d : task {selected} done - Mark task as done e : task {selected} edit - Open selected task in editor j : {selected+=1} - Move down in task report k : {selected-=1} - Move up in task report J : {selected+=pageheight} - Move page down in task report K : {selected-=pageheight} - Move page up in task report g : {selected=first} - Go to top G : {selected=last} - Go to bottom l : task log {string} - Log new task m : task {selected} modify {string} - Modify selected task q : exit - Quit s : task {selected} start/stop - Toggle start and stop t : task {selected} +{tag}/-{tag} - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: next ) u : task undo - Undo v : {toggle mark on selected} - Toggle mark on selected V : {toggle marks on all tasks} - Toggle marks on all tasks in current filter report x : task delete {selected} - Delete z : toggle task info - Toggle task info view A : task {selected} annotate {string} - Annotate current task Ctrl-e : scroll down task details - Scroll task details view down one line Ctrl-y : scroll up task details - Scroll task details view up one line ! : {string} - Custom shell command 1-9 : {string} - Run user defined shortcuts : : {task id} - Jump to task id c : context switcher menu - Open context switcher menu ? : help - Help menu Keybindings for filter / command prompt: Ctrl + f | Right : move forward - Move forward one character Ctrl + b | Left : move backward - Move backward one character Ctrl + h | Backspace : backspace - Delete one character back Ctrl + d | Delete : delete - Delete one character forward Ctrl + a | Home : home - Go to the beginning of line Ctrl + e | End : end - Go to the end of line Ctrl + k : delete to end - Delete to the end of line Ctrl + u : delete to beginning - Delete to the beginning of line Ctrl + w : delete previous word - Delete previous word Alt + d : delete next word - Delete next word Alt + b : move to previous word - Move to previous word Alt + f : move to next word - Move to next word Alt + t : transpose words - Transpose words Up : scroll history - Go backward in history matching from beginning of line to cursor Down : scroll history - Go forward in history matching from beginning of line to cursor TAB | Ctrl + n : tab complete - Open tab completion and selection first element OR cycle to next element BACKTAB | Ctrl + p : tab complete - Cycle to previous element Keybindings for context switcher: j : {selected+=1} - Move forward a context k : {selected-=1} - Move back a context Keybindings for calendar: j : {selected+=1} - Move forward a year in calendar k : {selected-=1} - Move back a year in calendar J : {selected+=10} - Move forward a decade in calendar K : {selected-=10} - Move back a decade in calendar","title":"KEYBINDINGS"},{"location":"taskwarrior-tui.1/#exit-statuses","text":"0 : If everything goes OK.","title":"EXIT STATUSES"},{"location":"taskwarrior-tui.1/#author","text":"taskwarrior-tui is maintained by Dheepak \u2018kdheepak\u2019 Krishnamurthy and other contributors. Source code: https://github.com/kdheepak/taskwarrior-tui/ \\ Contributors: https://github.com/kdheepak/taskwarrior-tui/graphs/contributors","title":"AUTHOR"},{"location":"configuration/advanced/","text":"Advanced configuration taskwarrior-tui parses the output of task show to get configuration data. This allows taskwarrior-tui to use the same defaults as taskwarrior and configure additional options as required. taskrc config file options: Other taskwarrior-tui configuration options are possible using the user defined attribute feature of taskwarrior . All taskwarrior-tui specific configuration options will begin with uda.taskwarrior-tui. . The following is a full list of all the options available and their default values implemented by taskwarrior-tui if not defined in your taskrc file. uda.taskwarrior-tui.selection.indicator=\u2022 uda.taskwarrior-tui.selection.bold=yes uda.taskwarrior-tui.selection.italic=no uda.taskwarrior-tui.selection.dim=no uda.taskwarrior-tui.selection.blink=no uda.taskwarrior-tui.selection.reverse=no uda.taskwarrior-tui.mark.indicator=\u2714 uda.taskwarrior-tui.unmark.indicator= uda.taskwarrior-tui.mark-selection.indicator=\u29bf uda.taskwarrior-tui.unmark-selection.indicator=\u29be uda.taskwarrior-tui.calendar.months-per-row=4 uda.taskwarrior-tui.task-report.show-info=true uda.taskwarrior-tui.task-report.looping=true uda.taskwarrior-tui.task-report.jump-on-task-add=true uda.taskwarrior-tui.task-report.prompt-on-delete=false uda.taskwarrior-tui.task-report.prompt-on-done=false uda.taskwarrior-tui.style.report.selection= uda.taskwarrior-tui.style.context.active=black on rgb444 uda.taskwarrior-tui.style.calendar.title=black on rgb444 uda.taskwarrior-tui.style.report.scrollbar=black uda.taskwarrior-tui.scrollbar.indicator=\u2588 uda.taskwarrior-tui.style.report.scrollbar.area=white uda.taskwarrior-tui.scrollbar.area=\u2551 uda.taskwarrior-tui.task-report.next.filter=$(task show report.next.filter) uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-add=true uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-annotate=true uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-log=true uda.taskwarrior-tui.task-report.reset-filter-on-esc=true uda.taskwarrior-tui.context-menu.select-on-move=false The uda.taskwarrior-tui.task-report.next.filter variable defines the default view at program startup. Set this to any preconfigured report ( task reports ), or create your own report in taskwarrior and specify its name here. commandline options: -r : specify a report to be shown, overrides uda.taskwarrior-tui.task-report.next.filter for this instance Configure user defined shortcuts: You can configure shortcuts to execute custom commands from your taskwarrior 's taskrc file (default: ~/.taskrc ). You can do this by mapping a shortcut to an executable file: uda.taskwarrior-tui.shortcuts.1=~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh uda.taskwarrior-tui.shortcuts.2=~/.config/taskwarrior-tui/shortcut-scripts/sync.sh ... The file can have any name in any location, but must be executable. By default, keys 1 - 9 are available to run shortcuts. When you hit the shortcut, the script will be executed with the selected_task_uuid as an argument: ~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh $selected_tasks_uuid For example, you can add the personal tag to the currently selected task with the following script in ~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh : task rc.bulk=0 rc.confirmation=off rc.dependency.confirmation=off rc.recurrence.confirmation=off \"$@\" modify +personal By default, shortcuts are linked to the 1-9 number row keys. They can be customized as any other keys through uda.taskwarrior-tui.keyconfig.shortcut1=<key> . For example: uda.taskwarrior-tui.keyconfig.shortcut1=n You can set up shortcuts to run task sync or any custom bash script that you'd like. Configure one background task You can configure one background task to run periodically: uda.taskwarrior-tui.background_process=task sync uda.taskwarrior-tui.background_process_period=60 This will run task sync every 60 seconds. If the background_process is an empty string (default), then no process will be run. Only if the background_process is defined and if the background_process runs successfully, it'll be run every background_process_period number of seconds (default: 60 seconds). However, if it fails even once it won't be run again till taskwarrior-tui is restarted.","title":"Advanced"},{"location":"configuration/advanced/#advanced-configuration","text":"taskwarrior-tui parses the output of task show to get configuration data. This allows taskwarrior-tui to use the same defaults as taskwarrior and configure additional options as required.","title":"Advanced configuration"},{"location":"configuration/advanced/#taskrc-config-file-options","text":"Other taskwarrior-tui configuration options are possible using the user defined attribute feature of taskwarrior . All taskwarrior-tui specific configuration options will begin with uda.taskwarrior-tui. . The following is a full list of all the options available and their default values implemented by taskwarrior-tui if not defined in your taskrc file. uda.taskwarrior-tui.selection.indicator=\u2022 uda.taskwarrior-tui.selection.bold=yes uda.taskwarrior-tui.selection.italic=no uda.taskwarrior-tui.selection.dim=no uda.taskwarrior-tui.selection.blink=no uda.taskwarrior-tui.selection.reverse=no uda.taskwarrior-tui.mark.indicator=\u2714 uda.taskwarrior-tui.unmark.indicator= uda.taskwarrior-tui.mark-selection.indicator=\u29bf uda.taskwarrior-tui.unmark-selection.indicator=\u29be uda.taskwarrior-tui.calendar.months-per-row=4 uda.taskwarrior-tui.task-report.show-info=true uda.taskwarrior-tui.task-report.looping=true uda.taskwarrior-tui.task-report.jump-on-task-add=true uda.taskwarrior-tui.task-report.prompt-on-delete=false uda.taskwarrior-tui.task-report.prompt-on-done=false uda.taskwarrior-tui.style.report.selection= uda.taskwarrior-tui.style.context.active=black on rgb444 uda.taskwarrior-tui.style.calendar.title=black on rgb444 uda.taskwarrior-tui.style.report.scrollbar=black uda.taskwarrior-tui.scrollbar.indicator=\u2588 uda.taskwarrior-tui.style.report.scrollbar.area=white uda.taskwarrior-tui.scrollbar.area=\u2551 uda.taskwarrior-tui.task-report.next.filter=$(task show report.next.filter) uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-add=true uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-annotate=true uda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-log=true uda.taskwarrior-tui.task-report.reset-filter-on-esc=true uda.taskwarrior-tui.context-menu.select-on-move=false The uda.taskwarrior-tui.task-report.next.filter variable defines the default view at program startup. Set this to any preconfigured report ( task reports ), or create your own report in taskwarrior and specify its name here.","title":"taskrc config file options:"},{"location":"configuration/advanced/#commandline-options","text":"-r : specify a report to be shown, overrides uda.taskwarrior-tui.task-report.next.filter for this instance","title":"commandline options:"},{"location":"configuration/advanced/#configure-user-defined-shortcuts","text":"You can configure shortcuts to execute custom commands from your taskwarrior 's taskrc file (default: ~/.taskrc ). You can do this by mapping a shortcut to an executable file: uda.taskwarrior-tui.shortcuts.1=~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh uda.taskwarrior-tui.shortcuts.2=~/.config/taskwarrior-tui/shortcut-scripts/sync.sh ... The file can have any name in any location, but must be executable. By default, keys 1 - 9 are available to run shortcuts. When you hit the shortcut, the script will be executed with the selected_task_uuid as an argument: ~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh $selected_tasks_uuid For example, you can add the personal tag to the currently selected task with the following script in ~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh : task rc.bulk=0 rc.confirmation=off rc.dependency.confirmation=off rc.recurrence.confirmation=off \"$@\" modify +personal By default, shortcuts are linked to the 1-9 number row keys. They can be customized as any other keys through uda.taskwarrior-tui.keyconfig.shortcut1=<key> . For example: uda.taskwarrior-tui.keyconfig.shortcut1=n You can set up shortcuts to run task sync or any custom bash script that you'd like.","title":"Configure user defined shortcuts:"},{"location":"configuration/advanced/#configure-one-background-task","text":"You can configure one background task to run periodically: uda.taskwarrior-tui.background_process=task sync uda.taskwarrior-tui.background_process_period=60 This will run task sync every 60 seconds. If the background_process is an empty string (default), then no process will be run. Only if the background_process is defined and if the background_process runs successfully, it'll be run every background_process_period number of seconds (default: 60 seconds). However, if it fails even once it won't be run again till taskwarrior-tui is restarted.","title":"Configure one background task"},{"location":"configuration/colors/","text":"Color configuration taskwarrior-tui reads values from your taskwarrior 's taskrc file (default: ~/.taskrc ). For example, color.active is used to style the active task. If you would like to try it, open your taskrc file and change color.active=white on blue . So color.active will take precedence over color.overdue . You can see what color.active is by running task show color.active in your favorite shell prompt. The following color attributes are supported: color.deleted color.completed color.active color.overdue color.scheduled color.due.today color.due color.blocked color.blocking color.recurring color.tagged","title":"Color configuration"},{"location":"configuration/colors/#color-configuration","text":"taskwarrior-tui reads values from your taskwarrior 's taskrc file (default: ~/.taskrc ). For example, color.active is used to style the active task. If you would like to try it, open your taskrc file and change color.active=white on blue . So color.active will take precedence over color.overdue . You can see what color.active is by running task show color.active in your favorite shell prompt. The following color attributes are supported: color.deleted color.completed color.active color.overdue color.scheduled color.due.today color.due color.blocked color.blocking color.recurring color.tagged","title":"Color configuration"},{"location":"configuration/keys/","text":"Key configuration Configure taskwarrior-tui using ~/.taskrc : taskwarrior-tui reads values from your taskwarrior 's taskrc file (default: ~/.taskrc ). uda.taskwarrior-tui.keyconfig.quit=q uda.taskwarrior-tui.keyconfig.refresh=r uda.taskwarrior-tui.keyconfig.go-to-bottom=G uda.taskwarrior-tui.keyconfig.go-to-top=g uda.taskwarrior-tui.keyconfig.down=j uda.taskwarrior-tui.keyconfig.up=k uda.taskwarrior-tui.keyconfig.page-down=J uda.taskwarrior-tui.keyconfig.page-up=K uda.taskwarrior-tui.keyconfig.delete=x uda.taskwarrior-tui.keyconfig.done=d uda.taskwarrior-tui.keyconfig.start-stop=s uda.taskwarrior-tui.keyconfig.quick-tag=t uda.taskwarrior-tui.keyconfig.undo=u uda.taskwarrior-tui.keyconfig.edit=e uda.taskwarrior-tui.keyconfig.modify=m uda.taskwarrior-tui.keyconfig.shell=! uda.taskwarrior-tui.keyconfig.log=l uda.taskwarrior-tui.keyconfig.add=a uda.taskwarrior-tui.keyconfig.annotate=A uda.taskwarrior-tui.keyconfig.filter=/ uda.taskwarrior-tui.keyconfig.zoom=z uda.taskwarrior-tui.keyconfig.context-menu=c uda.taskwarrior-tui.keyconfig.next-tab=] uda.taskwarrior-tui.keyconfig.previous-tab=[","title":"Key configuration"},{"location":"configuration/keys/#key-configuration","text":"Configure taskwarrior-tui using ~/.taskrc : taskwarrior-tui reads values from your taskwarrior 's taskrc file (default: ~/.taskrc ). uda.taskwarrior-tui.keyconfig.quit=q uda.taskwarrior-tui.keyconfig.refresh=r uda.taskwarrior-tui.keyconfig.go-to-bottom=G uda.taskwarrior-tui.keyconfig.go-to-top=g uda.taskwarrior-tui.keyconfig.down=j uda.taskwarrior-tui.keyconfig.up=k uda.taskwarrior-tui.keyconfig.page-down=J uda.taskwarrior-tui.keyconfig.page-up=K uda.taskwarrior-tui.keyconfig.delete=x uda.taskwarrior-tui.keyconfig.done=d uda.taskwarrior-tui.keyconfig.start-stop=s uda.taskwarrior-tui.keyconfig.quick-tag=t uda.taskwarrior-tui.keyconfig.undo=u uda.taskwarrior-tui.keyconfig.edit=e uda.taskwarrior-tui.keyconfig.modify=m uda.taskwarrior-tui.keyconfig.shell=! uda.taskwarrior-tui.keyconfig.log=l uda.taskwarrior-tui.keyconfig.add=a uda.taskwarrior-tui.keyconfig.annotate=A uda.taskwarrior-tui.keyconfig.filter=/ uda.taskwarrior-tui.keyconfig.zoom=z uda.taskwarrior-tui.keyconfig.context-menu=c uda.taskwarrior-tui.keyconfig.next-tab=] uda.taskwarrior-tui.keyconfig.previous-tab=[","title":"Key configuration"},{"location":"developer/guide/","text":"Developer guide Running tests git clone https://github.com/kdheepak/taskwarrior-tui cd taskwarrior-tui git clone github.com/kdheepak/taskwarrior-testdata tests/data source .env cargo test Running debug build cargo run Running release build cargo run --release Testing individual function If you want to test the test_taskwarrior_timing function in src/app.rs : cargo test -- app::tests::test_taskwarrior_timing --nocapture Getting logs export TASKWARRIOR_TUI_LOG_LEVEL = debug taskwarrior-tui # OR export TASKWARRIOR_TUI_LOG_LEVEL = trace cargo run Contributing to documentation See docs/ folder in the repository: https://github.com/kdheepak/taskwarrior-tui When you make a PR to the repository, a preview of the documentation is rendered and a link is posted to the PR. Internals of taskwarrior-tui taskwarrior-tui is a state driven terminal user interface. Keyboard events are read asynchronously and is communicated using channels. Most of the logic is implemented in src/app.rs . The difference between the previous state and the current state of the TUI is rendered every Tick by tui-rs . app.draw_... functions are responsible for rendering the UI. Actions for key presses are taken in app.handle_input(&mut self, input: Key) .","title":"Guide"},{"location":"developer/guide/#developer-guide","text":"","title":"Developer guide"},{"location":"developer/guide/#running-tests","text":"git clone https://github.com/kdheepak/taskwarrior-tui cd taskwarrior-tui git clone github.com/kdheepak/taskwarrior-testdata tests/data source .env cargo test","title":"Running tests"},{"location":"developer/guide/#running-debug-build","text":"cargo run","title":"Running debug build"},{"location":"developer/guide/#running-release-build","text":"cargo run --release","title":"Running release build"},{"location":"developer/guide/#testing-individual-function","text":"If you want to test the test_taskwarrior_timing function in src/app.rs : cargo test -- app::tests::test_taskwarrior_timing --nocapture","title":"Testing individual function"},{"location":"developer/guide/#getting-logs","text":"export TASKWARRIOR_TUI_LOG_LEVEL = debug taskwarrior-tui # OR export TASKWARRIOR_TUI_LOG_LEVEL = trace cargo run","title":"Getting logs"},{"location":"developer/guide/#contributing-to-documentation","text":"See docs/ folder in the repository: https://github.com/kdheepak/taskwarrior-tui When you make a PR to the repository, a preview of the documentation is rendered and a link is posted to the PR.","title":"Contributing to documentation"},{"location":"developer/guide/#internals-of-taskwarrior-tui","text":"taskwarrior-tui is a state driven terminal user interface. Keyboard events are read asynchronously and is communicated using channels. Most of the logic is implemented in src/app.rs . The difference between the previous state and the current state of the TUI is rendered every Tick by tui-rs . app.draw_... functions are responsible for rendering the UI. Actions for key presses are taken in app.handle_input(&mut self, input: Key) .","title":"Internals of taskwarrior-tui"}]}